// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: grpc/svr/app_manager.proto

package svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppManagerService_GetAllAppName_FullMethodName = "/svr.AppManagerService/GetAllAppName"
	AppManagerService_Status_FullMethodName        = "/svr.AppManagerService/Status"
	AppManagerService_Start_FullMethodName         = "/svr.AppManagerService/Start"
	AppManagerService_Stop_FullMethodName          = "/svr.AppManagerService/Stop"
	AppManagerService_ReStart_FullMethodName       = "/svr.AppManagerService/ReStart"
	AppManagerService_StartAll_FullMethodName      = "/svr.AppManagerService/StartAll"
	AppManagerService_StopAll_FullMethodName       = "/svr.AppManagerService/StopAll"
	AppManagerService_StatusAll_FullMethodName     = "/svr.AppManagerService/StatusAll"
	AppManagerService_SyncApp_FullMethodName       = "/svr.AppManagerService/SyncApp"
	AppManagerService_SyncAll_FullMethodName       = "/svr.AppManagerService/SyncAll"
)

// AppManagerServiceClient is the client API for AppManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AppManagerService 微服务管理gRPC服务
// 提供对Apollo管理的微服务进行启动、停止、重启、状态查询等操作
type AppManagerServiceClient interface {
	// GetAllAppName 获取所有服务名称列表
	GetAllAppName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error)
	// Status 获取指定服务的运行状态
	Status(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*StatusReply, error)
	// Start 启动指定的服务
	Start(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error)
	// Stop 停止指定的服务
	Stop(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error)
	// ReStart 重启指定的服务
	ReStart(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error)
	// StartAll 启动所有服务
	StartAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error)
	// StopAll 停止所有服务
	StopAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error)
	// StatusAll 获取所有服务的状态
	StatusAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error)
	// SyncApp 同步指定服务的配置
	SyncApp(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error)
	// SyncAll 同步所有服务的配置
	SyncAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoolReply, error)
}

type appManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppManagerServiceClient(cc grpc.ClientConnInterface) AppManagerServiceClient {
	return &appManagerServiceClient{cc}
}

func (c *appManagerServiceClient) GetAllAppName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReply)
	err := c.cc.Invoke(ctx, AppManagerService_GetAllAppName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) Status(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, AppManagerService_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) Start(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, AppManagerService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) Stop(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, AppManagerService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) ReStart(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, AppManagerService_ReStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) StartAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReply)
	err := c.cc.Invoke(ctx, AppManagerService_StartAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) StopAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReply)
	err := c.cc.Invoke(ctx, AppManagerService_StopAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) StatusAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReply)
	err := c.cc.Invoke(ctx, AppManagerService_StatusAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) SyncApp(ctx context.Context, in *AppName, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, AppManagerService_SyncApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerServiceClient) SyncAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoolReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, AppManagerService_SyncAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppManagerServiceServer is the server API for AppManagerService service.
// All implementations must embed UnimplementedAppManagerServiceServer
// for forward compatibility.
//
// AppManagerService 微服务管理gRPC服务
// 提供对Apollo管理的微服务进行启动、停止、重启、状态查询等操作
type AppManagerServiceServer interface {
	// GetAllAppName 获取所有服务名称列表
	GetAllAppName(context.Context, *emptypb.Empty) (*ListReply, error)
	// Status 获取指定服务的运行状态
	Status(context.Context, *AppName) (*StatusReply, error)
	// Start 启动指定的服务
	Start(context.Context, *AppName) (*BoolReply, error)
	// Stop 停止指定的服务
	Stop(context.Context, *AppName) (*BoolReply, error)
	// ReStart 重启指定的服务
	ReStart(context.Context, *AppName) (*BoolReply, error)
	// StartAll 启动所有服务
	StartAll(context.Context, *emptypb.Empty) (*ListReply, error)
	// StopAll 停止所有服务
	StopAll(context.Context, *emptypb.Empty) (*ListReply, error)
	// StatusAll 获取所有服务的状态
	StatusAll(context.Context, *emptypb.Empty) (*ListReply, error)
	// SyncApp 同步指定服务的配置
	SyncApp(context.Context, *AppName) (*BoolReply, error)
	// SyncAll 同步所有服务的配置
	SyncAll(context.Context, *emptypb.Empty) (*BoolReply, error)
	mustEmbedUnimplementedAppManagerServiceServer()
}

// UnimplementedAppManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppManagerServiceServer struct{}

func (UnimplementedAppManagerServiceServer) GetAllAppName(context.Context, *emptypb.Empty) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAppName not implemented")
}
func (UnimplementedAppManagerServiceServer) Status(context.Context, *AppName) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAppManagerServiceServer) Start(context.Context, *AppName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedAppManagerServiceServer) Stop(context.Context, *AppName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedAppManagerServiceServer) ReStart(context.Context, *AppName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReStart not implemented")
}
func (UnimplementedAppManagerServiceServer) StartAll(context.Context, *emptypb.Empty) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAll not implemented")
}
func (UnimplementedAppManagerServiceServer) StopAll(context.Context, *emptypb.Empty) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAll not implemented")
}
func (UnimplementedAppManagerServiceServer) StatusAll(context.Context, *emptypb.Empty) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusAll not implemented")
}
func (UnimplementedAppManagerServiceServer) SyncApp(context.Context, *AppName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApp not implemented")
}
func (UnimplementedAppManagerServiceServer) SyncAll(context.Context, *emptypb.Empty) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAll not implemented")
}
func (UnimplementedAppManagerServiceServer) mustEmbedUnimplementedAppManagerServiceServer() {}
func (UnimplementedAppManagerServiceServer) testEmbeddedByValue()                           {}

// UnsafeAppManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppManagerServiceServer will
// result in compilation errors.
type UnsafeAppManagerServiceServer interface {
	mustEmbedUnimplementedAppManagerServiceServer()
}

func RegisterAppManagerServiceServer(s grpc.ServiceRegistrar, srv AppManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppManagerService_ServiceDesc, srv)
}

func _AppManagerService_GetAllAppName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).GetAllAppName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_GetAllAppName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).GetAllAppName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).Status(ctx, req.(*AppName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).Start(ctx, req.(*AppName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).Stop(ctx, req.(*AppName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_ReStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).ReStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_ReStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).ReStart(ctx, req.(*AppName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_StartAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).StartAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_StartAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).StartAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_StopAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).StopAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_StopAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).StopAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_StatusAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).StatusAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_StatusAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).StatusAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_SyncApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).SyncApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_SyncApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).SyncApp(ctx, req.(*AppName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManagerService_SyncAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServiceServer).SyncAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManagerService_SyncAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServiceServer).SyncAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AppManagerService_ServiceDesc is the grpc.ServiceDesc for AppManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svr.AppManagerService",
	HandlerType: (*AppManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAppName",
			Handler:    _AppManagerService_GetAllAppName_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _AppManagerService_Status_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _AppManagerService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _AppManagerService_Stop_Handler,
		},
		{
			MethodName: "ReStart",
			Handler:    _AppManagerService_ReStart_Handler,
		},
		{
			MethodName: "StartAll",
			Handler:    _AppManagerService_StartAll_Handler,
		},
		{
			MethodName: "StopAll",
			Handler:    _AppManagerService_StopAll_Handler,
		},
		{
			MethodName: "StatusAll",
			Handler:    _AppManagerService_StatusAll_Handler,
		},
		{
			MethodName: "SyncApp",
			Handler:    _AppManagerService_SyncApp_Handler,
		},
		{
			MethodName: "SyncAll",
			Handler:    _AppManagerService_SyncAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/svr/app_manager.proto",
}
